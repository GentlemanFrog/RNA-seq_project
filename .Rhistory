summary(res)
# Also we can change the threshold of adjusted p_values we look at
res_p_0.01 <- results(dds, alpha = 0.01)
summary(res_p_0.01)
plotMA(res, ylim=c(-2,2), main = "MA plot of airway data set")
ggsave(filename="MA_plot.png", plot=last_plot(), device="png")
# We performing this step to make more accurate log2FC estimates. This function allows for the shrinkage of the log2FC estimates
# toward zero when the information for a gene is low, which include situations like: low counts, high dispersion values. After usage of
# this function the distribution of LFC estimate for all genes is used to shrink the log2FC estimates of gene with little information
# or high dispersion toward more likely (lower LFC) estimates. (https://github.com/hbctraining/DGE_workshop_salmon/blob/master/lessons/05_DGE_DESeq2_analysis2.md)
resultsNames(dds)
# type = apeglm refers to approximate estimation for GLM coefficients which is the adaptive Student's t prior shrinkage estimator from the 'apeglm' package
resLFC <- lfcShrink(dds, coef = "dexamethasone_treated_vs_untreated", type = "apeglm")
plotMA(resLFC, main = "MA plot of airway data set after shrinkage")
ggsave(filename="MA_plot_after_shrinkage.png", plot=last_plot(), device="png")
# Plot counts - provides  the information of the counts of reads for a single gene across the analysed groups:
# for this plot was provided gen with the smallest adj. p_value from the DESeq results
plotCounts(dds, gene = which.min(res$padj), intgroup = "dexamethasone")
ggsave(filename="counts_plot.png", plot=last_plot(), device="png")
# Saving results ordered by p_pvalue:
resOrdered <- res[order(res$pvalue),]
write.csv(as.data.frame(resOrdered), file='deseq_results.csv')
res_adj_p <- subset(resOrdered, padj < 0.1)
res_adj_p
# saving filtered results:
write.csv(as.data.frame(res_adj_p), file='adj_p_results.csv')
# transformation with VST:
vsd <- vst(dds, blind = FALSE)
head(counts_data)
# After transformation
head(assay(vsd), 3)
library("pheatmap")
# selecting top 20 rows
select <- order(rowMeans(counts(dds, normalized=TRUE)), decreasing = TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("cellLine", "dexamethasone")])
pheatmap(assay(vsd)[select,], cluster_rows = FALSE, show_rownames = FALSE,
cluster_cols = FALSE, annotation = df)
ggsave(filename="heat_map.png", plot=last_plot(), device="png")
# This type of heat map give us an overview of the similarities and differences between groups of samples
# Also the hierarchical clustering is provided based on the sample to sample distance
sampleDistance <- dist(t(assay(vsd)))
library("RColorBrewer")
sampleDistMatrix <- as.matrix(sampleDistance)
rownames(sampleDistMatrix) <- paste(vsd$dexamethasone, vsd$cellLine, sep = "-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, 'Greens')) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDistance,
clustering_distance_cols = sampleDistance,
color = colors)
ggsave(filename="sample_to_sample_distance.png", plot=last_plot(), device="png")
png(filename = "pca_plot.png")
plotPCA(vsd, intgroup = c("cellLine", "dexamethasone"))
ggsave(filename="pca_plot.png", plot=last_plot(), device="png")
pcaData <- plotPCA(vsd, intgroup = c("cellLine", "dexamethasone"), returnData=TRUE)
# variable for showing the percentage of variance: (attr function catching only specific attribute of object)
percentVar <- round(100*attr(pcaData, "percentVar"))
# plotting our custom PCA plot with ggplot:
ggplot(pcaData, aes(PC1, PC2, color=dexamethasone, shape=cellLine))+
geom_point(size=3) +
xlab(paste0("PC1: ", percentVar[1],"% variance"))+
ylab(paste0("PC2: ", percentVar[2], "% variance"))+
coord_fixed()
ggsave(filename = "pca_custom.png", plot = last_plot(), device = "png")
library(DESeq2)
library(tidyverse)
library(airway)
data(airway)
airway
data(airway)
airway
# Changing the data to data_frame
sample_info <- as.data.frame(colData(airway))
# Restricting the data only to interesting columns
sample_info <- sample_info[,c(2,3)]
# Replacing shortcuts with proper name for column dex
sample_info$dex <- gsub('trt', 'treated', sample_info$dex)
sample_info$dex <- gsub('untrt', 'untreated', sample_info$dex)
# Renaming the column names: cell, dex to more descriptive names
names(sample_info) <- c('cellLine', 'dexamethasone')
# Writing chosen data info into csv file
write.table(sample_info, file = "sample_info.csv", sep = ',',
col.names = T, row.names = T, quote = F)
# Preparing data of experiment where rows are genes, columns are counts for each sample and gene
countsData <- assay(airway)
# Writing count data info into csv file
write.table(countsData, file = "counts_data.csv", sep = ',',
col.names = T, row.names = T, quote = F)
# Reading in counts data from csv:
counts_data<- read.csv('counts_data.csv')
# we see the rows are gene IDs (Ensemble), columns are the sample name but by this names
# we don't know which samples are treated and which one are untreated which we will set up
head(counts_data)
# Reading the sample_info:
column_data<-read.csv('sample_info.csv')
head(column_data)
# To perform calculations with DESeq we have to check the row names of column_data
# matches the names in counts_data.
# We performing this by checking if all colnames in counts_data are present in column_data
# We get the information in the boolean if there are all of them or not
all(colnames(counts_data) %in% rownames(column_data))
# In addition we check if they are in the same order:
all(colnames(counts_data) == rownames(column_data))
# First argument countData refers to counts genes accross samples, colData refers to data about cell line of each sample
# that we are checking and information about it being treated with drug or not, design is a formula which express
# how the counts for each gene depend on the variables in colData, so for our example we want to check the differences
# between treated and untreated samples so design refers to the dexamethasone column
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = column_data,
design = ~ dexamethasone)
dds
# This step allows us to reduce the memory size of the dds object, and increase the speed
# of the transformation and testing functions with DESeq2. It can also improve visualization,
# as features with no information for differential expression will not be plotted
keeped_rows <- rowSums(counts(dds)) >= 10
dds <- dds[keeped_rows,] # we drooped ~ 40k rows with lower than 10 counts
dds
dds$dexamethasone <- relevel(dds$dexamethasone, ref = "untreated")
dds$dexamethasone
# Now the script will perform the standard differential expression analysis, which all steps are wrapped in the single
# function DESeq.
dds <- DESeq(dds)
# Saving results from DESeqData object:
res <- results(dds)
# padj - this column contains adjusted p_values for multiple testing. We have to correct the p_values
#       for multiple testing because whenever the statistical test is performed we use a p value of 0.05.
#       5% of our differential expressed genes are not really differential expressed and they are there due to random chance.
#       To reduce problem of this false positives we perform methods to calculate the adjusted p_values to avoid this detection
#       of false positive genes.
res
# In the summary we can see how many genes are up-regulated, down-regulated, how much of them are outlires
# and how many of them have low counts.
summary(res)
# Also we can change the threshold of adjusted p_values we look at
res_p_0.01 <- results(dds, alpha = 0.01)
summary(res_p_0.01)
plotMA(res, ylim=c(-2,2), main = "MA plot of airway data set")
ggsave(filename="MA_plot.png", plot=last_plot(), device="png")
plotMA(res, ylim=c(-2,2), main = "MA plot of airway data set")
ggsave(filename="MA_plot.png", plot=last_plot(), device="jpg")
plotMA(res, ylim=c(-2,2), main = "MA plot of airway data set")
ggsave(filename="MA_plot.jpg", plot=last_plot(), device="jpeg")
plotMA(res, ylim=c(-2,2), main = "MA plot of airway data set")
savePlot("MA plot","jpeg")
jpeg('MA_plot.jpg')
plotMA(res, ylim=c(-2,2), main = "MA plot of airway data set")
dev.off()
# We performing this step to make more accurate log2FC estimates. This function allows for the shrinkage of the log2FC estimates
# toward zero when the information for a gene is low, which include situations like: low counts, high dispersion values. After usage of
# this function the distribution of LFC estimate for all genes is used to shrink the log2FC estimates of gene with little information
# or high dispersion toward more likely (lower LFC) estimates. (https://github.com/hbctraining/DGE_workshop_salmon/blob/master/lessons/05_DGE_DESeq2_analysis2.md)
resultsNames(dds)
# type = apeglm refers to approximate estimation for GLM coefficients which is the adaptive Student's t prior shrinkage estimator from the 'apeglm' package
resLFC <- lfcShrink(dds, coef = "dexamethasone_treated_vs_untreated", type = "apeglm")
resLFC
jpeg('MA_plot_after_shrinkage.jpg')
plotMA(resLFC, main = "MA plot of airway data set after shrinkage")
dev.off()
jpeg('count_plot.jpg')
plotCounts(dds, gene = which.min(res$padj), intgroup = "dexamethasone")
dev.off()
# Saving results ordered by p_pvalue:
resOrdered <- res[order(res$pvalue),]
write.csv(as.data.frame(resOrdered), file='deseq_results.csv')
res_adj_p <- subset(resOrdered, padj < 0.1)
res_adj_p
# saving filtered results:
write.csv(as.data.frame(res_adj_p), file='adj_p_results.csv')
# transformation with VST:
vsd <- vst(dds, blind = FALSE)
head(counts_data)
# After transformation
head(assay(vsd), 3)
library("pheatmap")
# selecting top 20 rows
select <- order(rowMeans(counts(dds, normalized=TRUE)), decreasing = TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("cellLine", "dexamethasone")])
jpeg('heat_map_top_20.jpg')
pheatmap(assay(vsd)[select,], cluster_rows = FALSE, show_rownames = FALSE,
cluster_cols = FALSE, annotation = df)
dev.off()
# This type of heat map give us an overview of the similarities and differences between groups of samples
# Also the hierarchical clustering is provided based on the sample to sample distance
sampleDistance <- dist(t(assay(vsd)))
library("RColorBrewer")
sampleDistMatrix <- as.matrix(sampleDistance)
rownames(sampleDistMatrix) <- paste(vsd$dexamethasone, vsd$cellLine, sep = "-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, 'Greens')) )(255)
jpeg('heat_map_with_sample_to_sample_distance.jpg')
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDistance,
clustering_distance_cols = sampleDistance,
color = colors)
dev.off()
jpeg('pca_plot.jpg')
plotPCA(vsd, intgroup = c("cellLine", "dexamethasone"))
dev.off()
pcaData <- plotPCA(vsd, intgroup = c("cellLine", "dexamethasone"), returnData=TRUE)
# variable for showing the percentage of variance: (attr function catching only specific attribute of object)
percentVar <- round(100*attr(pcaData, "percentVar"))
# plotting our custom PCA plot with ggplot:
ggplot(pcaData, aes(PC1, PC2, color=dexamethasone, shape=cellLine))+
geom_point(size=3) +
xlab(paste0("PC1: ", percentVar[1],"% variance"))+
ylab(paste0("PC2: ", percentVar[2], "% variance"))+
coord_fixed()
ggsave(filename = "pca_custom.png", plot = last_plot(), device = "png")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vidger")
library(vidger)
browseVignettes("vidger")
vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE
)
dev.print(jpeg, "box_plot_vidger.jpg")
dev.print(jpeg, "box_plot_vidger.jpg")
jpeg('box_plot_vidger.jpg')
vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE
)
dev.off()
p1 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "box"
)
p1 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "box"
)
p2 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "violin"
)
p3 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "boxdot"
)
p4 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "viodot"
)
p5 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "viosumm"
)
p6 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "notch"
)
# simple grid:
plot_grid(p1,p2,p3,p4,p5,p6, labels = c(1:6), align="hv")
# simple grid:
library(ggplot2)
plot_grid(p1,p2,p3,p4,p5,p6, labels = c(1:6), align="hv")
do.call(grid.arrange, c(p1,p2,p3,p4,p5,p6, list(ncol=2)))
# simple grid:
library(gridExtra)
do.call(grid.arrange, c(p1,p2,p3,p4,p5,p6, list(ncol=2)))
do.call(grid.arrange, c(p1,p2,p3,p4,p5,p6)))
do.call(grid.arrange, c(p1,p2,p3,p4,p5,p6))
grid.arrange(p1,p2,p3,p4,p5,p6, nrow=3)
grid.arrange(p1,p2,p3,p4,p5,p6, nrow=3)
vsScatterPlot(
x = 'treated', y = 'untreated',
data = dds , type = 'deseq', d.factor = 'dexamethasone',
title = TRUE, grid = TRUE
)
jpeg('scatter_plot_vidger.jpg')
vsScatterPlot(
x = 'treated', y = 'untreated',
data = dds , type = 'deseq', d.factor = 'dexamethasone',
title = TRUE, grid = TRUE
)
dev.off()
vsScatterMatrix(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
comp = NULL, title = TRUE, grid = TRUE, man.title = NULL
)
jpeg('scatter_matrix_vidger.jpg')
vsScatterMatrix(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
comp = NULL, title = TRUE, grid = TRUE, man.title = NULL
)
dev.off()
jpeg('scatter_matrix_vidger.jpg')
vsScatterMatrix(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
comp = NULL, title = TRUE, grid = TRUE, man.title = NULL
)
dev.off()
png('scatter_matrix_vidger.png')
vsScatterMatrix(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
comp = NULL, title = TRUE, grid = TRUE, man.title = NULL
)
dev.off()
vsDEGMatrix(
data = dds, padj = 0.05, d.factor = 'dexamethasone',
type = 'deseq', title = TRUE, legend = TRUE, grid = TRUE
)
png('differential_gene_expression_matrix.png')
vsDEGMatrix(
data = dds, padj = 0.05, d.factor = 'dexamethasone',
type = 'deseq', title = TRUE, legend = TRUE, grid = TRUE
)
dev.off()
vsMAPlot(
x = 'treated', y = 'untreated',
data = df.deseq, d.factor = 'dexamethasone', type = 'deseq',
padj = 0.05, y.lim = NULL, lfc = NULL, title = TRUE,
legend = TRUE, grid = TRUE
)
vsMAPlot(
x = 'treated', y = 'untreated',
data = dds, d.factor = 'dexamethasone', type = 'deseq',
padj = 0.05, y.lim = NULL, lfc = NULL, title = TRUE,
legend = TRUE, grid = TRUE
)
png("ma_plot_vidger_dds.png")
vsMAPlot(
x = 'treated', y = 'untreated',
data = dds, d.factor = 'dexamethasone', type = 'deseq',
padj = 0.05, y.lim = NULL, lfc = NULL, title = TRUE,
legend = TRUE, grid = TRUE
)
dev.off()
vsMAPlot(
x = 'treated', y = 'untreated',
data = vsd, d.factor = 'dexamethasone', type = 'deseq',
padj = 0.05, y.lim = NULL, lfc = NULL, title = TRUE,
legend = TRUE, grid = TRUE
)
vsMAMatrix(
data = dds, d.factor = 'cellLine', type = 'deseq',
padj = 0.05, y.lim = NULL, lfc = 1, title = TRUE,
grid = TRUE, counts = TRUE, data.return = FALSE
)
vsMAMatrix(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
padj = 0.05, y.lim = NULL, lfc = 1, title = TRUE,
grid = TRUE, counts = TRUE, data.return = FALSE
)
png("ma_plot_matrices_vidger.png")
vsMAMatrix(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
padj = 0.05, y.lim = NULL, lfc = 1, title = TRUE,
grid = TRUE, counts = TRUE, data.return = FALSE
)
dev.off()
png("vulcano_plot_vidger.png")
vsVolcano(
x = 'treated', y = 'untreated',
data = dds, d.factor = 'dexamethasone', type = 'deseq',
padj = 0.05, x.lim = NULL, lfc = NULL, title = TRUE,
legend = TRUE, grid = TRUE, data.return = FALSE
)
dev.off()
png("vulcano_matrices_vidger.png")
vsVolcanoMatrix(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
padj = 0.05, x.lim = NULL, lfc = NULL, title = TRUE,
legend = TRUE, grid = TRUE, counts = TRUE
)
dev.off()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationDbi")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationDbi)
res_adj_p
res_adj_p[res_adj_p$log2FoldChange > 0.5]
res[res$log2FoldChange > 0.5]
res
res[res$log2FoldChange > 0.5,]
res_adj_p[res_adj_p$log2FoldChange > 0.5,]
gene_to_ontology <- rownames(res_adj_p[res_adj_p$log2FoldChange > 0.5,])
genes_to_ontology <- rownames(res_adj_p[res_adj_p$log2FoldChange > 0.5,])
genes_to_ontology
# In first argumnt we pass our list of genes, then we specify the database, we specifye the
# type of our IDs and on the last argument we pass what type of gene ontology we want to get
# BP refers to Biological process
GO_results <- enrichGO(gene=gene_to_ontology, OrgDb = "org.Hs.eg.db",
keyType = "ENSEMBL", ont = "BP")
gene_ontology_res <- as.data.frame(GO_results)
View(gene_ontology_res)
# We can also plot this data: (We will plot top 20 of the geese referring to p_value)
fit <- plot(barplot(GO_results, showCategory = 20))
fit
png("gene_ontology.png", res = 250, width = 1200, height = 1000)
print(fit)
dev.off()
png("gene_ontology.png", res = 250, width = 1200, height = 1200)
print(fit)
dev.off()
png("gene_ontology.png", res = 250, width = 1200, height = 1500)
print(fit)
dev.off()
png("gene_ontology.png", res = 250, width = 1200, height = 1700)
print(fit)
dev.off()
png("gene_ontology.png", res = 250, width = 1200, height = 1800)
print(fit)
dev.off()
View(airway)
View(airway)
View(column_data)
View(column_data)
View(counts_data)
View(counts_data)
dds$dexamethasone <- relevel(dds$dexamethasone, ref = "untreated")
dds$dexamethasone
dds
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = column_data,
design = ~ dexamethasone)
library(DESeq2)
library(tidyverse)
library(airway)
data(airway)
airway
# Changing the data to data_frame
sample_info <- as.data.frame(colData(airway))
# Restricting the data only to interesting columns
sample_info <- sample_info[,c(2,3)]
# Replacing shortcuts with proper name for column dex
sample_info$dex <- gsub('trt', 'treated', sample_info$dex)
sample_info$dex <- gsub('untrt', 'untreated', sample_info$dex)
# Renaming the column names: cell, dex to more descriptive names
names(sample_info) <- c('cellLine', 'dexamethasone')
# Writing chosen data info into csv file
write.table(sample_info, file = "sample_info.csv", sep = ',',
col.names = T, row.names = T, quote = F)
# Preparing data of experiment where rows are genes, columns are counts for each sample and gene
countsData <- assay(airway)
# Writing count data info into csv file
write.table(countsData, file = "counts_data.csv", sep = ',',
col.names = T, row.names = T, quote = F)
# Reading in counts data from csv:
counts_data<- read.csv('counts_data.csv')
# we see the rows are gene IDs (Ensemble), columns are the sample name but by this names
# we don't know which samples are treated and which one are untreated which we will set up
head(counts_data)
# Reading the sample_info:
column_data<-read.csv('sample_info.csv')
head(column_data)
# To perform calculations with DESeq we have to check the row names of column_data
# matches the names in counts_data.
# We performing this by checking if all colnames in counts_data are present in column_data
# We get the information in the boolean if there are all of them or not
all(colnames(counts_data) %in% rownames(column_data))
# In addition we check if they are in the same order:
all(colnames(counts_data) == rownames(column_data))
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = column_data,
design = ~ dexamethasone)
dds
# This step allows us to reduce the memory size of the dds object, and increase the speed
# of the transformation and testing functions with DESeq2. It can also improve visualization,
# as features with no information for differential expression will not be plotted
keeped_rows <- rowSums(counts(dds)) >= 10
dds <- dds[keeped_rows,] # we drooped ~ 40k rows with lower than 10 counts
dds
dds$dexamethasone
dds$dexamethasone <- relevel(dds$dexamethasone, ref = "untreated")
dds$dexamethasone
# Now the script will perform the standard differential expression analysis, which all steps are wrapped in the single
# function DESeq.
dds <- DESeq(dds)
# Saving results from DESeqData object:
res <- results(dds)
# padj - this column contains adjusted p_values for multiple testing. We have to correct the p_values
#       for multiple testing because whenever the statistical test is performed we use a p value of 0.05.
#       5% of our differential expressed genes are not really differential expressed and they are there due to random chance.
#       To reduce problem of this false positives we perform methods to calculate the adjusted p_values to avoid this detection
#       of false positive genes.
res
# In the summary we can see how many genes are up-regulated, down-regulated, how much of them are outlires
# and how many of them have low counts.
summary(res)
# Also we can change the threshold of adjusted p_values we look at
res_p_0.01 <- results(dds, alpha = 0.01)
summary(res_p_0.01)
View(res_adj_p)
p2 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "violin"
)
library(vidger)
p2 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "violin"
)
p6 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "notch"
)
p5 <- vsBoxPlot(
data = dds, d.factor = 'dexamethasone', type = 'deseq',
title = TRUE, legend = TRUE, grid = TRUE, aes = "viosumm"
)
browseVignettes("vidger")
